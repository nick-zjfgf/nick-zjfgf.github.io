<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识（学习、传播、共享）</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-01T15:10:04.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>NICK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK 线程</title>
    <link href="http://yoursite.com/2017/12/01/java-policy/"/>
    <id>http://yoursite.com/2017/12/01/java-policy/</id>
    <published>2017-12-01T14:59:14.000Z</published>
    <updated>2017-12-01T15:10:04.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、饱和策略"><a href="#一、饱和策略" class="headerlink" title="一、饱和策略"></a>一、饱和策略</h1><h2 id="1-1-AbortPolicy中止策略"><a href="#1-1-AbortPolicy中止策略" class="headerlink" title="1.1 AbortPolicy中止策略"></a>1.1 AbortPolicy中止策略</h2><p>该策略是默认饱和策略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">            throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</span><br><span class="line">                                                 &quot; rejected from &quot; +</span><br><span class="line">                                                 e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-DiscardPolicy抛弃策略"><a href="#1-2-DiscardPolicy抛弃策略" class="headerlink" title="1.2 DiscardPolicy抛弃策略"></a>1.2 DiscardPolicy抛弃策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">  //不做处理，抛弃</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-DiscardOldestPolicy抛弃旧任务策略"><a href="#1-3-DiscardOldestPolicy抛弃旧任务策略" class="headerlink" title="1.3 DiscardOldestPolicy抛弃旧任务策略"></a>1.3 DiscardOldestPolicy抛弃旧任务策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">            if (!e.isShutdown()) &#123;</span><br><span class="line">                e.getQueue().poll();</span><br><span class="line">                e.execute(r);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码，先将阻塞队列中的头元素出队抛弃，再尝试提交任务。如果此时阻塞队列使用PriorityBlockingQueue优先级队列，将会导致优先级最高的任务被抛弃，因此不建议将该种策略配合优先级队列使用。</p><h2 id="1-4-CallerRunsPolicy调用者运行"><a href="#1-4-CallerRunsPolicy调用者运行" class="headerlink" title="1.4 CallerRunsPolicy调用者运行"></a>1.4 CallerRunsPolicy调用者运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="line">            if (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既不抛弃任务也不抛出异常，直接运行任务的run方法，换言之将任务回退给调用者来直接运行。使用该策略时线程池饱和后将由调用线程池的主线程自己来执行任务，因此在执行任务的这段时间里主线程无法再提交新任务，从而使线程池中工作线程有时间将正在处理的任务处理完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、饱和策略&quot;&gt;&lt;a href=&quot;#一、饱和策略&quot; class=&quot;headerlink&quot; title=&quot;一、饱和策略&quot;&gt;&lt;/a&gt;一、饱和策略&lt;/h1&gt;&lt;h2 id=&quot;1-1-AbortPolicy中止策略&quot;&gt;&lt;a href=&quot;#1-1-AbortPolicy中止策
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>动态数据源实现</title>
    <link href="http://yoursite.com/2017/11/20/dynamic-datasource/"/>
    <id>http://yoursite.com/2017/11/20/dynamic-datasource/</id>
    <published>2017-11-20T05:22:54.000Z</published>
    <updated>2017-11-21T13:12:54.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AOP实现动态jdbc切换"><a href="#1-AOP实现动态jdbc切换" class="headerlink" title="1.AOP实现动态jdbc切换"></a>1.AOP实现动态jdbc切换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected Object determineCurrentLookupKey() &#123;</span><br><span class="line">return DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.config;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.After;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Order(-1)// 保证该AOP在@Transactional之前执行</span><br><span class="line">@Component</span><br><span class="line">public class DynamicDataSourceAspect &#123;</span><br><span class="line">private static final Logger logger = LoggerFactory.getLogger(DynamicDataSourceAspect.class);</span><br><span class="line"></span><br><span class="line">    @Before(&quot;@annotation(ds)&quot;)</span><br><span class="line">    public void changeDataSource(JoinPoint point, TargetDataSource ds) throws Throwable &#123;</span><br><span class="line">        String dsId = ds.name();</span><br><span class="line">        if (!DynamicDataSourceContextHolder.containsDataSource(dsId)) &#123;</span><br><span class="line">            logger.error(&quot;数据源[&#123;&#125;]不存在，使用默认数据源 &gt; &#123;&#125;&quot;, ds.name(), point.getSignature());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.debug(&quot;Use DataSource : &#123;&#125; &gt; &#123;&#125;&quot;, ds.name(), point.getSignature());</span><br><span class="line">            DynamicDataSourceContextHolder.setDataSourceType(ds.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;@annotation(ds)&quot;)</span><br><span class="line">    public void restoreDataSource(JoinPoint point, TargetDataSource ds) &#123;</span><br><span class="line">        logger.debug(&quot;Revert DataSource : &#123;&#125; &gt; &#123;&#125;&quot;, ds.name(), point.getSignature());</span><br><span class="line">        DynamicDataSourceContextHolder.clearDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.config;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class DynamicDataSourceContextHolder &#123;</span><br><span class="line">private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;String&gt;();</span><br><span class="line">    public static List&lt;String&gt; dataSourceIds = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public static void setDataSourceType(String dataSourceType) &#123;</span><br><span class="line">        contextHolder.set(dataSourceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getDataSourceType() &#123;</span><br><span class="line">        return contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void clearDataSourceType() &#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断指定DataSrouce当前是否存在</span><br><span class="line">     *</span><br><span class="line">     * @param dataSourceId</span><br><span class="line">     * @return</span><br><span class="line">     * @author SHANHY</span><br><span class="line">     * @create  2016年1月24日</span><br><span class="line">     */</span><br><span class="line">    public static boolean containsDataSource(String dataSourceId)&#123;</span><br><span class="line">        return dataSourceIds.contains(dataSourceId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.config;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.MutablePropertyValues;</span><br><span class="line">import org.springframework.beans.PropertyValues;</span><br><span class="line">import org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line">import org.springframework.beans.factory.support.GenericBeanDefinition;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;</span><br><span class="line">import org.springframework.boot.bind.RelaxedDataBinder;</span><br><span class="line">import org.springframework.boot.bind.RelaxedPropertyResolver;</span><br><span class="line">import org.springframework.context.EnvironmentAware;</span><br><span class="line">import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line">import org.springframework.core.convert.ConversionService;</span><br><span class="line">import org.springframework.core.convert.support.DefaultConversionService;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line">import org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class DynamicDataSourceRegister implements ImportBeanDefinitionRegistrar, EnvironmentAware&#123;</span><br><span class="line">private static final Logger logger = LoggerFactory.getLogger(DynamicDataSourceRegister.class);</span><br><span class="line"></span><br><span class="line">    private ConversionService conversionService = new DefaultConversionService();</span><br><span class="line">    private PropertyValues dataSourcePropertyValues;</span><br><span class="line"></span><br><span class="line">    // 如配置文件中未指定数据源类型，使用该默认值</span><br><span class="line"></span><br><span class="line">    private static final Object DATASOURCE_TYPE_DEFAULT = &quot;com.alibaba.druid.pool.DruidDataSource&quot;;</span><br><span class="line"></span><br><span class="line">    // 数据源</span><br><span class="line">    private DataSource defaultDataSource;</span><br><span class="line">    private Map&lt;String, DataSource&gt; customDataSources = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;Object, Object&gt;();</span><br><span class="line">        // 将主数据源添加到更多数据源中</span><br><span class="line">        targetDataSources.put(&quot;dataSource&quot;, defaultDataSource);</span><br><span class="line">        DynamicDataSourceContextHolder.dataSourceIds.add(&quot;dataSource&quot;);</span><br><span class="line">        // 添加更多数据源</span><br><span class="line">        targetDataSources.putAll(customDataSources);</span><br><span class="line">        for (String key : customDataSources.keySet()) &#123;</span><br><span class="line">            DynamicDataSourceContextHolder.dataSourceIds.add(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 创建DynamicDataSource</span><br><span class="line">        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();</span><br><span class="line">        beanDefinition.setBeanClass(DynamicDataSource.class);</span><br><span class="line">        beanDefinition.setSynthetic(true);</span><br><span class="line">        MutablePropertyValues mpv = beanDefinition.getPropertyValues();</span><br><span class="line">        mpv.addPropertyValue(&quot;defaultTargetDataSource&quot;, defaultDataSource);</span><br><span class="line">        mpv.addPropertyValue(&quot;targetDataSources&quot;, targetDataSources);</span><br><span class="line">        registry.registerBeanDefinition(&quot;dataSource&quot;, beanDefinition);</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;Dynamic DataSource Registry&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public DataSource buildDataSource(Map&lt;String, Object&gt; dsMap) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Object type = dsMap.get(&quot;type&quot;);</span><br><span class="line">            if (type == null)</span><br><span class="line">                type = DATASOURCE_TYPE_DEFAULT;// 默认DataSource</span><br><span class="line"></span><br><span class="line">            Class&lt;? extends DataSource&gt; dataSourceType;</span><br><span class="line">            dataSourceType = (Class&lt;? extends DataSource&gt;) Class.forName((String) type);</span><br><span class="line"></span><br><span class="line">            String driverClassName = dsMap.get(&quot;driver-class-name&quot;).toString();</span><br><span class="line">            String url = dsMap.get(&quot;url&quot;).toString();</span><br><span class="line">            String username = dsMap.get(&quot;username&quot;).toString();</span><br><span class="line">            String password = dsMap.get(&quot;password&quot;).toString();</span><br><span class="line"></span><br><span class="line">            DataSourceBuilder factory = DataSourceBuilder.create().driverClassName(driverClassName).url(url)</span><br><span class="line">                    .username(username).password(password).type(dataSourceType);</span><br><span class="line">            return factory.build();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载多数据源配置</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void setEnvironment(Environment env) &#123;</span><br><span class="line">        initDefaultDataSource(env);</span><br><span class="line">        initCustomDataSources(env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void initDefaultDataSource(Environment env) &#123;</span><br><span class="line">        // 读取主数据源</span><br><span class="line">        RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env, &quot;spring.datasource.&quot;);</span><br><span class="line">        Map&lt;String, Object&gt; dsMap = new HashMap&lt;&gt;();</span><br><span class="line">        dsMap.put(&quot;type&quot;, propertyResolver.getProperty(&quot;type&quot;));</span><br><span class="line">        dsMap.put(&quot;driver-class-name&quot;, propertyResolver.getProperty(&quot;driver-class-name&quot;));</span><br><span class="line">        dsMap.put(&quot;url&quot;, propertyResolver.getProperty(&quot;url&quot;));</span><br><span class="line">        dsMap.put(&quot;username&quot;, propertyResolver.getProperty(&quot;username&quot;));</span><br><span class="line">        dsMap.put(&quot;password&quot;, propertyResolver.getProperty(&quot;password&quot;));</span><br><span class="line"></span><br><span class="line">        defaultDataSource = buildDataSource(dsMap);</span><br><span class="line"></span><br><span class="line">        dataBinder(defaultDataSource, env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void dataBinder(DataSource dataSource, Environment env)&#123;</span><br><span class="line">        RelaxedDataBinder dataBinder = new RelaxedDataBinder(dataSource);</span><br><span class="line">        //dataBinder.setValidator(new LocalValidatorFactory().run(this.applicationContext));</span><br><span class="line">        dataBinder.setConversionService(conversionService);</span><br><span class="line">        dataBinder.setIgnoreNestedProperties(false);//false</span><br><span class="line">        dataBinder.setIgnoreInvalidFields(false);//false</span><br><span class="line">        dataBinder.setIgnoreUnknownFields(true);//true</span><br><span class="line">        if(dataSourcePropertyValues == null)&#123;</span><br><span class="line">            Map&lt;String, Object&gt; rpr = new RelaxedPropertyResolver(env, &quot;spring.datasource&quot;).getSubProperties(&quot;.&quot;);</span><br><span class="line">            Map&lt;String, Object&gt; values = new HashMap&lt;&gt;(rpr);</span><br><span class="line">            // 排除已经设置的属性</span><br><span class="line">            values.remove(&quot;type&quot;);</span><br><span class="line">            values.remove(&quot;driver-class-name&quot;);</span><br><span class="line">            values.remove(&quot;url&quot;);</span><br><span class="line">            values.remove(&quot;username&quot;);</span><br><span class="line">            values.remove(&quot;password&quot;);</span><br><span class="line">            dataSourcePropertyValues = new MutablePropertyValues(values);</span><br><span class="line">        &#125;</span><br><span class="line">        dataBinder.bind(dataSourcePropertyValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void initCustomDataSources(Environment env) &#123;</span><br><span class="line">        // 读取配置文件获取更多数据源，也可以通过defaultDataSource读取数据库获取更多数据源</span><br><span class="line">        RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(env, &quot;custom.datasource.&quot;);</span><br><span class="line">        String dsPrefixs = propertyResolver.getProperty(&quot;names&quot;);</span><br><span class="line">        for (String dsPrefix : dsPrefixs.split(&quot;,&quot;)) &#123;// 多个数据源</span><br><span class="line">            Map&lt;String, Object&gt; dsMap = propertyResolver.getSubProperties(dsPrefix + &quot;.&quot;);</span><br><span class="line">            DataSource ds = buildDataSource(dsMap);</span><br><span class="line">            customDataSources.put(dsPrefix, ds);</span><br><span class="line">            dataBinder(ds, env);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.config;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.Documented;</span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface TargetDataSource &#123;</span><br><span class="line">String name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-动态实现jdbc及es切换"><a href="#2-动态实现jdbc及es切换" class="headerlink" title="2.动态实现jdbc及es切换"></a>2.动态实现jdbc及es切换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.service.strategy.base;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line">public class BaseStrategy&lt;T&gt; implements InitializingBean&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.service.strategy.base;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.ParameterizedType;</span><br><span class="line">import java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line">import com.lvmama.context.ApplicationContextUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class FrontBaseStrategy&lt;T&gt; extends BaseStrategy&lt;T&gt; &#123;</span><br><span class="line">protected T clientService;</span><br><span class="line"></span><br><span class="line">protected static final String REMOTE = &quot;Remote&quot;;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;service_strategy&#125;&quot;)</span><br><span class="line">private String strategy;</span><br><span class="line"></span><br><span class="line">private Class&lt;T&gt; entityClass;</span><br><span class="line"></span><br><span class="line">private String genericSimpleName;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public FrontBaseStrategy() &#123;</span><br><span class="line">super();</span><br><span class="line">//子类中保存父类泛型，父类中保存不了泛型，会泛型擦除  类似HibernateBaseDao&lt;T&gt; implements BaseDao&lt;T&gt;</span><br><span class="line">Type genType = this.getClass().getGenericSuperclass();</span><br><span class="line">Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class="line">entityClass = (Class&lt;T&gt;) params[0];</span><br><span class="line">genericSimpleName = entityClass.getSimpleName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">this.initClientService(this.strategy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void initClientService(String strategy1)&#123;</span><br><span class="line">if(StringUtils.isNotBlank(strategy1))&#123;</span><br><span class="line">this.clientService = (T) ApplicationContextUtil.getBean(strategy1 + genericSimpleName);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.clientService = (T) ApplicationContextUtil.getBean(this.strategy + genericSimpleName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.service.strategy.impl;</span><br><span class="line"></span><br><span class="line">import javax.transaction.Transactional;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.lvmama.datasource.service.base.IUserBaseService;</span><br><span class="line">import com.lvmama.datasource.service.strategy.IUserBaseStrategyService;</span><br><span class="line">import com.lvmama.datasource.service.strategy.base.FrontBaseStrategy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&quot;userStrategyService&quot;)</span><br><span class="line">public class UserStrategyServiceImpl extends FrontBaseStrategy&lt;IUserBaseService&gt; implements IUserBaseStrategyService &#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;user_strategy:&#125;&quot;)</span><br><span class="line">private String strategy;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">this.initClientService(strategy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int count() &#123;</span><br><span class="line">return this.clientService.count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.lvmama.datasource.service.mybatis;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.transaction.Transactional;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import com.lvmama.datasource.config.TargetDataSource;</span><br><span class="line">import com.lvmama.datasource.dao.mybatis.UserMyBatisDao;</span><br><span class="line">import com.lvmama.datasource.domain.User;</span><br><span class="line">import com.lvmama.datasource.service.base.IUserBaseService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service(&quot;mybatisIUserBaseService&quot;)</span><br><span class="line">@Transactional</span><br><span class="line">public class UserMybatisServiceImpl implements IUserBaseService &#123;</span><br><span class="line">@Resource</span><br><span class="line">private UserMyBatisDao userMyBatisDao;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@TargetDataSource(name =&quot;ds2&quot;)</span><br><span class="line">public int count() &#123;</span><br><span class="line">return userMyBatisDao.count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-AOP实现动态jdbc切换&quot;&gt;&lt;a href=&quot;#1-AOP实现动态jdbc切换&quot; class=&quot;headerlink&quot; title=&quot;1.AOP实现动态jdbc切换&quot;&gt;&lt;/a&gt;1.AOP实现动态jdbc切换&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring异步任务，@Async配置和使用</title>
    <link href="http://yoursite.com/2017/11/13/spring-async/"/>
    <id>http://yoursite.com/2017/11/13/spring-async/</id>
    <published>2017-11-13T02:14:53.000Z</published>
    <updated>2017-11-21T13:12:54.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h2><p>这个注解用于标注某个方法或某个类里面的所有方法都是需要异步处理的。被注解的方法被调用的时候，会在新线程中执行，而调用它的方法会在原来的线程中执行。这样可以避免阻塞、以及保证任务的实时性。适用于处理log、发送邮件、短信……等。</p><h2 id="二、应用范围"><a href="#二、应用范围" class="headerlink" title="二、应用范围"></a>二、应用范围</h2><ul><li>类：表示这个类中的所有方法都是异步的；</li><li>方法：表示这个方法是异步的，如果类也注解了，则以这个方法的注解为准。</li></ul><h2 id="三、相关配置"><a href="#三、相关配置" class="headerlink" title="三、相关配置"></a>三、相关配置</h2><h3 id="1-lt-task-annotation-driven-gt"><a href="#1-lt-task-annotation-driven-gt" class="headerlink" title="1.&lt;task:annotation-driven /&gt;"></a>1.<code>&lt;task:annotation-driven /&gt;</code></h3><ul><li>executor：指定一个缺省的executor给@Async使用。</li><li>例子：<code>&lt;task:annotation-driven executor=&quot;asyncExecutor&quot; /&gt;</code></li></ul><h3 id="2-lt-task-executor-gt"><a href="#2-lt-task-executor-gt" class="headerlink" title="2.&lt;task:executor /&gt;"></a>2.<code>&lt;task:executor /&gt;</code></h3><ul><li>id：当配置多个executor时，被@Async(“id”)指定使用；也被作为线程名的前缀。</li><li>pool-size：</li><li>core size：最小的线程数，缺省：1</li><li>max size：最大的线程数，缺省：Integer.MAX_VALUE</li><li>queue-capacity：当最小的线程数已经被占用满后，新的任务会被放进queue里面，当这个queue的capacity也被占满之后，pool里面会创建新线程处理这个任务，直到总线程数达到了max size，这时系统会拒绝这个任务并抛出TaskRejectedException异常（缺省配置的情况下，可以通过rejection-policy来决定如何处理这种情况）。缺省值为：Integer.MAX_VALUE</li><li>keep-alive：超过core size的那些线程，任务完成后，再经过这个时长（秒）会被结束掉</li><li>rejection-policy：当pool已经达到max size的时候，如何处理新任务</li><li><ul><li>ABORT（缺省）：抛出TaskRejectedException异常，然后不执行</li></ul></li><li><ul><li>DISCARD：不执行，也不抛出异常</li></ul></li><li><ul><li>DISCARD_OLDEST：丢弃queue中最旧的那个任务</li></ul></li><li><ul><li>CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</li></ul></li></ul><h3 id="3-配置例子"><a href="#3-配置例子" class="headerlink" title="3.配置例子"></a>3.配置例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;task:annotation-driven executor=&quot;asyncExecutor&quot; /&gt;</span><br><span class="line">&lt;task:executor id=&quot;asyncExecutor&quot; pool-size=&quot;100-10000&quot; queue-capacity=&quot;10&quot;/&gt;</span><br></pre></td></tr></table></figure><p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 缺省的异步任务线程池 --&gt;   </span><br><span class="line">&lt;task:annotation-driven executor=&quot;asyncExecutor&quot; /&gt;  </span><br><span class="line">&lt;task:executor id=&quot;asyncExecutor&quot; pool-size=&quot;100-10000&quot; queue-capacity=&quot;10&quot; /&gt;  </span><br><span class="line"></span><br><span class="line">&lt;!-- 处理log的线程池 --&gt;  </span><br><span class="line">&lt;task:executor id=&quot;logExecutor&quot; pool-size=&quot;15-1000&quot; queue-capacity=&quot;5&quot; keep-alive=&quot;5&quot;/&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">@Async(&quot;logExecutor&quot;)    //如果不指定名字，会使用缺省的“asyncExecutor”  </span><br><span class="line">public void saveUserOpLog(TabUserOpLog tabUserOpLog) &#123;  </span><br><span class="line"></span><br><span class="line"> userOpLogDAO.insertTabUserOpLog(tabUserOpLog);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-线程的优先级和类型："><a href="#4-线程的优先级和类型：" class="headerlink" title="4.线程的优先级和类型："></a>4.线程的优先级和类型：</h3><ul><li>优先级：NORM_PRIORITY</li><li>类型：非守护线程</li><li>用户线程（User Thread）：JVM会等待所有的用户线程结束后才退出；当系统中没有用户线程了，JVM也就退出了</li><li>守护线程（Daemon Thread）：一般是为其他线程提供服务的线程，比如GC垃圾回收器；JVM退出时，不会管守护线程是否存在，而是直接退出</li><li>所以，对于文件、数据库的操作，不适宜使用守护线程，不然可能会丢失数据！</li></ul><h3 id="4-附"><a href="#4-附" class="headerlink" title="4.附"></a>4.附</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Configuration  </span><br><span class="line">@EnableAsync  </span><br><span class="line">public class SpringConfig &#123;  </span><br><span class="line"></span><br><span class="line">    /** Set the ThreadPoolExecutor&apos;s core pool size. */  </span><br><span class="line">    private int corePoolSize = 10;  </span><br><span class="line">    /** Set the ThreadPoolExecutor&apos;s maximum pool size. */  </span><br><span class="line">    private int maxPoolSize = 200;  </span><br><span class="line">    /** Set the capacity for the ThreadPoolExecutor&apos;s BlockingQueue. */  </span><br><span class="line">    private int queueCapacity = 10;  </span><br><span class="line"></span><br><span class="line">    private String ThreadNamePrefix = &quot;MyLogExecutor-&quot;;  </span><br><span class="line"></span><br><span class="line">    @Bean  </span><br><span class="line">    public Executor logExecutor() &#123;  </span><br><span class="line">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();  </span><br><span class="line">        executor.setCorePoolSize(corePoolSize);  </span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);  </span><br><span class="line">        executor.setQueueCapacity(queueCapacity);  </span><br><span class="line">        executor.setThreadNamePrefix(ThreadNamePrefix);  </span><br><span class="line"></span><br><span class="line">        // rejection-policy：当pool已经达到max size的时候，如何处理新任务  </span><br><span class="line">        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行  </span><br><span class="line">        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());  </span><br><span class="line">        executor.initialize();  </span><br><span class="line">        return executor;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、描述&quot;&gt;&lt;a href=&quot;#一、描述&quot; class=&quot;headerlink&quot; title=&quot;一、描述&quot;&gt;&lt;/a&gt;一、描述&lt;/h2&gt;&lt;p&gt;这个注解用于标注某个方法或某个类里面的所有方法都是需要异步处理的。被注解的方法被调用的时候，会在新线程中执行，而调用它的方法
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/08/hello-world/"/>
    <id>http://yoursite.com/2017/11/08/hello-world/</id>
    <published>2017-11-08T14:32:27.154Z</published>
    <updated>2017-11-12T13:16:09.725Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
